<?xml version="1.0" encoding="utf-8"?>
<!--
.natvis file for Visual Studio debugger.
Purpose: provide nicer views on data types used by Dear ImGui.

To enable:
* include file in your VS project (most recommended: not intrusive and always kept up to date!)
* or copy in %USERPROFILE%\Documents\Visual Studio XXXX\Visualizers (current user)
* or copy in %VsInstallDirectory%\Common7\Packages\Debugger\Visualizers (all users)

Schema can be found at %VsInstallDirectory%\2xxx\Community\Xml\Schemas\1033\natvis.xsd

More information at: https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019
Format specifiers: https://learn.microsoft.com/en-us/visualstudio/debugger/format-specifiers-in-cpp
-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="Vector2" Priority="High">
    <DisplayString>{value}</DisplayString>
  </Type>
  <Type Name="Vector3" Priority="High">
    <DisplayString>{value}</DisplayString>
  </Type>
  <Type Name="Vector4" Priority="High">
    <DisplayString>{value}</DisplayString>
  </Type>

  <Type Name="Matrix2" Priority="High">
    <DisplayString>{value}</DisplayString>
    <Expand HideRawView="true">
      <Item Name="col 1">value.value[0]</Item>
      <Item Name="col 2">value.value[1]</Item>
    </Expand>
  </Type>
  <Type Name="Matrix3" Priority="High">
    <DisplayString>{value}</DisplayString>
    <Expand HideRawView="true">
      <Item Name="col 1">value.value[0]</Item>
      <Item Name="col 2">value.value[1]</Item>
      <Item Name="col 3">value.value[2]</Item>
    </Expand>
  </Type>
  <Type Name="Matrix4" Priority="High">
    <DisplayString>{value}</DisplayString>
    <Expand HideRawView="true">
      <Item Name="col 1">value.value[0]</Item>
      <Item Name="col 2">value.value[1]</Item>
      <Item Name="col 3">value.value[2]</Item>
      <Item Name="col 4">value.value[3]</Item>
    </Expand>
  </Type>
  
  <Type Name="Rotation" Priority="High">
    <DisplayString>{value}</DisplayString>
    <Expand HideRawView="true">
      <Item Name="roll">value.x,g</Item>
      <Item Name="pitch">value.y,g</Item>
      <Item Name="yaw">value.z,g</Item>
    </Expand>
  </Type>

  <Type Name="RotationMatrix" Priority="High">
    <DisplayString>{rotationMatrix}</DisplayString>
  </Type>

  <Type Name="Quat" Priority="High">
    <DisplayString>{x,g}i + {y,g}j + {z,g}k + {w,g}</DisplayString>
    <Expand HideRawView="true">
      <Item Name="x">x,g</Item>
      <Item Name="y">y,g</Item>
      <Item Name="z">z,g</Item>
      <Item Name="w">w,g</Item>
      <CustomListItems MaxItemsPerView="1">
        <!-- calculate length using fast inverse sqrt -->
        <Variable Name="sl" InitialValue="x*x+y*y+z*z+w*w"/>
        <Variable Name="k" InitialValue="sl"/>
        <Variable Name="n" InitialValue="k/2"/>
        <Variable Name="i" InitialValue="0x5F3759DF - ((*(int *)&amp;k) &gt;&gt; 1)"/>
        <If Condition="k != 0">
          <Exec>k = *(float *)&amp;i</Exec>
          <Exec>k = k * (1.5f - (n * k * k))</Exec>
          <Exec>k = k * (1.5f - (n * k * k))</Exec>
          <Exec>k = k * (1.5f - (n * k * k))</Exec>
          <Item Name="[len]">1/k,g</Item>
          <Item Name="[len^2]">sl</Item>
        </If>
        <If Condition="k == 0">
          <Item Name="[len]">0.0f,g</Item>
        </If>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="Color" Priority="High">
    <DisplayString>{colorValue}</DisplayString>
    <Expand HideRawView="true">
      <Synthetic Name="[rgba]">
        <DisplayString>
          <!-- hex RGBA color -->
          #{
          (colorValue.x &lt;&lt; 24) |
          (colorValue.y &lt;&lt; 16) |
          (colorValue.z &lt;&lt; 8)  |
          (colorValue.w &lt;&lt; 0),Xb
          }
        </DisplayString>
      </Synthetic>
      <Item Name="x">colorValue.x</Item>
      <Item Name="y">colorValue.y</Item>
      <Item Name="z">colorValue.z</Item>
      <Item Name="w">colorValue.w</Item>
    </Expand>
  </Type>
  
  <Type Name="LinearColor" Priority="High">
    <DisplayString>{colorValue}</DisplayString>
    <Expand HideRawView="true">
      <Synthetic Name="[rgba]">
        <DisplayString>
          <!-- hex RGBA color -->
          #{
          (unsigned((colorValue.x&lt;0?0:(colorValue.x&gt;1?1:colorValue.x))*255.5f) &lt;&lt; 24) |
          (unsigned((colorValue.y&lt;0?0:(colorValue.y&gt;1?1:colorValue.y))*255.5f) &lt;&lt; 16) |
          (unsigned((colorValue.z&lt;0?0:(colorValue.z&gt;1?1:colorValue.z))*255.5f) &lt;&lt; 8)  |
          (unsigned((colorValue.w&lt;0?0:(colorValue.w&gt;1?1:colorValue.w))*255.5f) &lt;&lt; 0),Xb
          }
        </DisplayString>
      </Synthetic>
      <Item Name="x">colorValue.x,g</Item>
      <Item Name="y">colorValue.y,g</Item>
      <Item Name="z">colorValue.z,g</Item>
      <Item Name="w">colorValue.w,g</Item>
    </Expand>
  </Type>

  <Type Name="CellIndex&lt;2&gt;" Priority="High">
    <DisplayString>[{idx[0]} {idx[1]}]</DisplayString>
  </Type>
  <Type Name="CellIndex&lt;3&gt;" Priority="High">
    <DisplayString>[{idx[0]} {idx[1]} {idx[2]}]</DisplayString>
  </Type>
  <Type Name="CellIndex&lt;4&gt;" Priority="High">
    <DisplayString>[{idx[0]} {idx[1]} {idx[2]} {idx[3]}]</DisplayString>
  </Type>
  <Type Name="CellIndex&lt;*&gt;">
    <DisplayString>{idx}</DisplayString>
  </Type>

  <Type Name="VectorND&lt;*,*&gt;">
    <DisplayString>{cellsCount} {"$T1"}</DisplayString>
  </Type>

  <!-- BitArray as individual bits below might be too long to debug, So using binary representation of each word
  <Type Name="BitArray&lt;*&gt;">
    <DisplayString>size={bitsCount}</DisplayString>
    <Expand>
      <IndexListItems>
        <Size>bitsCount</Size>
        <ValueNode>(bits._Mypair._Myval2._Myfirst[$i / BITS_PER_ELEMENT] &gt;&gt; ($i % BITS_PER_ELEMENT)) &amp; 1,d</ValueNode>
      </IndexListItems>
    </Expand>
  </Type> -->
  <Type Name="BitArray&lt;*&gt;">
    <DisplayString>size={bitsCount}</DisplayString>
    <Expand HideRawView="true">
      <IndexListItems>
        <Size>bits._Mypair._Myval2._Mylast - bits._Mypair._Myval2._Myfirst</Size>
        <ValueNode>bits._Mypair._Myval2._Myfirst[$i],b</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <!-- To display list as tree with condition
  <TreeItems>
    <Size>debugStrings-&gt;_List._Mypair._Myval2._Mysize</Size>
    <HeadPointer>debugStrings-&gt;_List._Mypair._Myval2._Myhead-&gt;_Next</HeadPointer>
    <LeftPointer>_Prev</LeftPointer>
    <RightPointer>_Next</RightPointer>
    <ValueNode>_Myval</ValueNode>
  </TreeItems>-->
  <!-- Get from map based on key
  <CustomListItems>
    <Variable Name="pNode" InitialValue="debugStrings-&gt;_List._Mypair._Myval2._Myhead-&gt;_Next" />
    <Size>1</Size>
    <Loop>
      <Break Condition="pNode == nullptr" />
      <If Condition="pNode->_Myval.first == id">
        <Item>pNode->_Myval</Item>
      </If>
      <Exec>pNode = pNode->_Next</Exec>
    </Loop>
  </CustomListItems>-->
  
  <!-- Std_UnorderedMap_Int_OperatorBracket_idx(debugStrs(), id) does not seem to work -->
  <Type Name="StringID">
    <Intrinsic Name="debugStrs" Expression="ProgramCore.dll!DebugStringIDsData::debugStrings"/>
    <Intrinsic Name="debugStrsSize" Expression="debugStrs()-&gt;_List._Mypair._Myval2._Mysize"/>
    <DisplayString Condition="id == 0">Invalid</DisplayString>
    <DisplayString>{id}</DisplayString>
    <Expand HideRawView="true">
      <CustomListItems Condition="debugStrs() != nullptr &amp;&amp; id != 0" Optional="true">
        <Variable Name="pNode" InitialValue="debugStrs()-&gt;_List._Mypair._Myval2._Myhead-&gt;_Next" />
        <Variable Name="i" InitialValue="0" />
        <Size>1</Size>
        <Loop Condition="pNode != nullptr &amp;&amp; i &lt; debugStrsSize()">
          <If Condition="pNode->_Myval.first == id">
            <Item Name="string">pNode->_Myval.second</Item>
            <Break/>
          </If>
          <Exec>pNode = pNode->_Next</Exec>
          <Exec>i++</Exec>
        </Loop>
      </CustomListItems>
      <Item Name="id">id</Item>
      <Item Name="debugStrings" Optional="true">debugStrs()</Item>
    </Expand>
  </Type>
  
  <Type Name="ClassProperty">
    <DisplayString>ClassName: {nameString,na}</DisplayString>
  </Type>
  <Type Name="BaseProperty" Inheritable="true">
    <DisplayString>Name: {nameString,na}, Type: {type}</DisplayString>
  </Type>
  <Type Name="FieldProperty">
    <DisplayString>{accessor,en} {nameString,sb} : {field->nameString,sb}</DisplayString>
  </Type>
  <Type Name="FunctionProperty">
    <DisplayString>{accessor,en} {nameString,sb}() : {funcReturnProp->nameString,sb}</DisplayString>
  </Type>

  <Type Name="cbe::Object" Inheritable="false">
    <!-- <AlternativeType Name="cbe::ObjectBase" Inheritable="false" /> -->
    <Intrinsic Name="objectsDb" Expression="CoreObjects.dll!CoreObjectsModule::objsDbPtr" />
    <Intrinsic Name="objectsTree" Expression="objectsDb()-&gt;objectTree" />
    <Intrinsic Name="objectsDbDataFirst" Expression="objectsTree().treeData._Mypair._Myval2._Myfirst" />
    <Intrinsic Name="objectsInDbCount" Expression="(unsigned long long)(objectsTree().treeData._Mypair._Myval2._Mylast - objectsTree().treeData._Mypair._Myval2._Myfirst)" />
    <Intrinsic Name="isValidDbIdx" ReturnType="bool" Expression="objectsInDbCount() &gt; checkDbIdx &amp;&amp; checkDbIdx &gt;= 0">
      <!-- using uint64 = unsigned long long; -->
      <Parameter Name="checkDbIdx" Type="unsigned long long" />
    </Intrinsic>

    <DisplayString Condition="!isValidDbIdx(dbIdx)">Deleted</DisplayString>
    <DisplayString Condition="objectsDb() != nullptr">{objectsDbDataFirst() + dbIdx,na}</DisplayString>
    <DisplayString>{dbIdx}</DisplayString>    

    <Expand HideRawView="true">
      <ExpandedItem Optional="true">objectsDbDataFirst() + dbIdx</ExpandedItem>
    </Expand>
  </Type>
  
  <Type Name="CoreObjectsDB::ObjectData"> 
    <Intrinsic Name="objectsDb" Expression="CoreObjects.dll!CoreObjectsModule::objsDbPtr" />
    <Intrinsic Name="objectsTree" Expression="objectsDb()-&gt;objectTree" />
    <Intrinsic Name="objectsDbDataFirst" Expression="objectsTree().treeData._Mypair._Myval2._Myfirst" />
    <Intrinsic Name="objectsTreeNodeFirst" Expression="objectsTree().nodes.elements._Mypair._Myval2._Myfirst" />
    <Intrinsic Name="objectsInDbCount" Expression="(unsigned long long)(objectsTree().treeData._Mypair._Myval2._Mylast - objectsTree().treeData._Mypair._Myval2._Myfirst)" />
    <Intrinsic Name="isValidDbIdx" ReturnType="bool" Expression="objectsInDbCount() &gt; checkDbIdx &amp;&amp; checkDbIdx &gt;= 0">
      <!-- using uint64 = unsigned long long; -->
      <Parameter Name="checkDbIdx" Type="unsigned long long" />
    </Intrinsic>
    <Intrinsic Name="thisDbIdx" Expression="this - objectsDbDataFirst()" />
    <Intrinsic Name="parentDbIdx" Expression="objectsTreeNodeFirst()[thisDbIdx()].parent" />
    
    <!-- Path related intrinsics -->       
    <Intrinsic Name="pathCapacity" Expression="path._Mypair._Myval2._Myres" />
    <!-- _BUF_SIZE = 16 / sizeof(char) &lt; 1 ? 1 : 16 / sizeof(char) == 16 -->
    <Intrinsic Name="strBufSize" Expression="16" />    
    <Intrinsic Name="isShortPath" Expression="pathCapacity() &lt; strBufSize()" />
    <Intrinsic Name="isLongPath" Expression="pathCapacity() &gt;= strBufSize()" />
    <DisplayString Condition="isShortPath()">{path._Mypair._Myval2._Bx._Buf,na}</DisplayString>
    <DisplayString Condition="isLongPath()">{path._Mypair._Myval2._Bx._Ptr,na}</DisplayString>
    <StringView Condition="isShortPath()">path._Mypair._Myval2._Bx._Buf,na</StringView>
    <StringView Condition="isLongPath()">path._Mypair._Myval2._Bx._Ptr,na</StringView>
    <Expand HideRawView="true">
      <Item Name="name" Condition="isShortPath()">path._Mypair._Myval2._Bx._Buf + nameOffset</Item>
      <Item Name="name" Condition="isLongPath()">path._Mypair._Myval2._Bx._Ptr + nameOffset</Item>
      <Item Name="path" Condition="isShortPath()">path._Mypair._Myval2._Bx._Buf</Item>
      <Item Name="path" Condition="isLongPath()">path._Mypair._Myval2._Bx._Ptr</Item>
      <Item Name="flags">flags</Item>
      <Item Name="allocIdx">allocIdx</Item>
      <Item Name="sid">sid</Item>
      <Item Name="class">clazz</Item>
      <Item Name="dbIdx" Condition="isValidDbIdx(thisDbIdx())">thisDbIdx()</Item>
      <Item Name="dbIdx" Condition="!isValidDbIdx(thisDbIdx())">InvalidDbIdx</Item>
      <Item Name="outer" Condition="isValidDbIdx(thisDbIdx()) &amp;&amp; isValidDbIdx(parentDbIdx())">objectsDbDataFirst() + parentDbIdx()</Item>
      <Synthetic Name="outer" Condition="isValidDbIdx(thisDbIdx()) &amp;&amp; !isValidDbIdx(parentDbIdx())">
        <DisplayString>None</DisplayString>
      </Synthetic>
    </Expand>
  </Type>

   <Type Name="cbe::ObjectPrivateDataView">
    <Intrinsic Name="objectsDb" Expression="CoreObjects.dll!CoreObjectsModule::objsDbPtr" />
    <Intrinsic Name="objectsTree" Expression="objectsDb()-&gt;objectTree" />
    <Intrinsic Name="objectsDbDataFirst" Expression="objectsTree().treeData._Mypair._Myval2._Myfirst" />
    <Intrinsic Name="objectsInDbCount" Expression="(unsigned long long)(objectsTree().treeData._Mypair._Myval2._Mylast - objectsTree().treeData._Mypair._Myval2._Myfirst)" />
    <Intrinsic Name="isValidDbIdx" ReturnType="bool" Expression="objectsInDbCount() &gt; checkDbIdx &amp;&amp; checkDbIdx &gt;= 0">
      <!-- using uint64 = unsigned long long; -->
      <Parameter Name="checkDbIdx" Type="unsigned long long" />
    </Intrinsic>

    <DisplayString>{name,sb} {path,na}</DisplayString>    
    <Expand HideRawView="true">
      <Item Name="name">name</Item>
      <Item Name="path">path</Item>
      <Item Name="flags">flags</Item>
      <Item Name="allocIdx">allocIdx</Item>
      <Item Name="sid">sid</Item>
      <Item Name="class">clazz</Item>
      <Item Name="outer" Condition="isValidDbIdx(outerIdx)">objectsDbDataFirst() + outerIdx</Item>
      <Synthetic Name="outer" Condition="!isValidDbIdx(outerIdx)">
        <DisplayString>None</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  
</AutoVisualizer>
