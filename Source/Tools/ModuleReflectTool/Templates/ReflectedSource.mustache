#include "{{HeaderInclude}}"
#include "Property/ContainerProperty.h"
#include "Types/CoreMiscDefines.h"

/* Generated codes do not modify here */
    
#ifdef HEADER_FILE_ID
#undef HEADER_FILE_ID
#endif

#define HEADER_FILE_ID {{HeaderFileId}}

struct HEADER_FILE_ID
{
    using ThisType = HEADER_FILE_ID;
    HEADER_FILE_ID();

    // Destructor for all ClassProperties
    template <typename ClassType>
    static void COMBINE(HEADER_FILE_ID, _DTor)(void* ptr)
    {
        CtorPolicyHelper::destructObject<typename COMBINE(ClassType::, CONSTRUCTION_POLICY_TYPEDEF_NAME), ClassType>(ptr);
    }
    template <typename ClassType>
    static void* COMBINE(HEADER_FILE_ID, _AllocFunc)()
    {
        return CtorPolicyHelper::allocateObject<typename COMBINE(ClassType::, CONSTRUCTION_POLICY_TYPEDEF_NAME), ClassType>();
    }
    
    {{#AllRegisterTypes}}
    static {{PropertyTypeName}}* create_{{SanitizedName}}();{{^NoInit}}
    static void init_{{SanitizedName}}({{PropertyTypeName}}* typeProperty);{{/NoInit}}
    {{/AllRegisterTypes}}
    
    {{#Classes}}{{^IsAbstract}}
    template <typename... Args>
    static {{TypeName}}* {{SanitizedName}}_CTor(void* ptr, Args... args);{{/IsAbstract}}{{/Classes}}
} COMBINE(HEADER_FILE_ID, _autoinit);

HEADER_FILE_ID::HEADER_FILE_ID()
{
    {{#AllRegisterTypes}}
    IReflectionRuntimeModule::{{RegisterFunctionName}}(STRID("{{TypeName}}"), typeInfoFrom<{{TypeName}}>()
        , { &ThisType::create_{{SanitizedName}}{{^NoInit}}, &ThisType::init_{{SanitizedName}}{{/NoInit}} }
    );
    {{/AllRegisterTypes}}
}

{{#QualifiedTypes}}
BaseProperty* HEADER_FILE_ID::create_{{SanitizedName}}()
{
    return new QualifiedProperty(STRID("{{TypeName}}"), TCHAR("{{TypeName}}"), typeInfoFrom<{{TypeName}}>());
}
void HEADER_FILE_ID::init_{{SanitizedName}}(BaseProperty* typeProperty)
{
    QualifiedProperty* prop = static_cast<QualifiedProperty*>(typeProperty);
    prop->setUnqualifiedType(IReflectionRuntimeModule::getType<CleanType<{{TypeName}}>>());
}
{{/QualifiedTypes}}

{{#PairTypes}}
BaseProperty* HEADER_FILE_ID::create_{{SanitizedName}}()
{
    return new PairProperty(STRID("{{TypeName}}"), TCHAR("{{TypeName}}"), typeInfoFrom<{{TypeName}}>());
}
void HEADER_FILE_ID::init_{{SanitizedName}}(BaseProperty* typeProperty)
{
    PairProperty* prop = static_cast<PairProperty*>(typeProperty);
    prop->setFirstProperty(IReflectionRuntimeModule::getType<{{TypeName}}::first_type>());
    prop->setSecondProperty(IReflectionRuntimeModule::getType<{{TypeName}}::second_type>());
    prop->constructDataRetriever<PairDataRetrieverImpl<{{TypeName}}::first_type, {{TypeName}}::second_type>>();
}
{{/PairTypes}}

{{#ContainerTypes}}
BaseProperty* HEADER_FILE_ID::create_{{SanitizedName}}()
{
    return new ContainerPropertyImpl<{{TypeName}}>(STRID("{{TypeName}}"), TCHAR("{{TypeName}}"), typeInfoFrom<{{TypeName}}>());
}
void HEADER_FILE_ID::init_{{SanitizedName}}(BaseProperty* typeProperty)
{
    using ReflectType = {{TypeName}};
    using ValueType = {{TypeName}}::value_type;
    ContainerPropertyImpl<{{TypeName}}>* prop = static_cast<ContainerPropertyImpl<{{TypeName}}>*>(typeProperty);
    prop->setElementProperty(IReflectionRuntimeModule::getType<ValueType>());
    prop->constructDataRetriever<ContainerRetrieverImpl<{{TypeName}}>>();
    CONTAINERTYPE_VALIDATIONS(ReflectType, ValueType);
}
{{/ContainerTypes}}

{{#MapTypes}}
BaseProperty* HEADER_FILE_ID::create_{{SanitizedName}}()
{
    return new MapProperty(STRID("{{TypeName}}"), TCHAR("{{TypeName}}"), typeInfoFrom<{{TypeName}}>());
}
void HEADER_FILE_ID::init_{{SanitizedName}}(BaseProperty* typeProperty)
{
    using ReflectType = {{TypeName}};
    using KeyType = {{TypeName}}::key_type;
    using ValueType = {{TypeName}}::mapped_type;
    MapProperty* prop = static_cast<MapProperty*>(typeProperty);
    prop->setElementProperty(IReflectionRuntimeModule::getType<{{TypeName}}::value_type>());
    prop->setKeyValueProperties(IReflectionRuntimeModule::getType<KeyType>(), IReflectionRuntimeModule::getType<ValueType>());
    prop->constructDataRetriever<MapDataRetrieverImpl<{{TypeName}}>>();
    MAPTYPE_VALIDATIONS(ReflectType, KeyType, ValueType);
}
{{/MapTypes}}

{{#EnumTypes}}
EnumProperty* HEADER_FILE_ID::create_{{SanitizedName}}()
{
    return new EnumProperty(STRID("{{TypeName}}"), TCHAR("{{TypeName}}"), typeInfoFrom<{{TypeName}}>(), {{CanUseAsFlags}});
}
void HEADER_FILE_ID::init_{{SanitizedName}}(EnumProperty* typeProperty)
{
    typeProperty->setPropertyMetaData({ {{TypeMetaData}} }, {{TypeMetaFlags}});
{{!Now the Enum's section context contains context for enum fields}}
{{#EnumFields}}    typeProperty->addEnumField(STRID("{{EnumFieldName}}"), TCHAR("{{EnumFieldName}}"), {{EnumFieldValue}}, {{EnumFieldMetaFlags}}, { {{EnumFieldMetaData}} });
{{/EnumFields}}    
}
{{/EnumTypes}}

{{#Classes}}{{^IsAbstract}}
template <typename... Args>
static {{TypeName}}* HEADER_FILE_ID::{{SanitizedName}}_CTor(void* ptr, Args... args)
{
    return CtorPolicyHelper::constructObject<typename COMBINE({{TypeName}}::, CONSTRUCTION_POLICY_TYPEDEF_NAME), {{TypeName}}, Args...>(ptr, std::forward<Args>(args)...);
}{{/IsAbstract}}

ClassProperty* HEADER_FILE_ID::create_{{SanitizedName}}()
{
    return new ClassProperty(STRID("{{TypeName}}"), TCHAR("{{TypeName}}"), typeInfoFrom<{{TypeName}}>());
}
void HEADER_FILE_ID::init_{{SanitizedName}}(ClassProperty* typeProperty)
{
    typeProperty->setPropertyMetaData({ {{TypeMetaData}} }, {{TypeMetaFlags}});
{{!Now the Class's section context contains context for class fields}}
{{#BaseClassTypeName}}
    typeProperty->setBaseClass(IReflectionRuntimeModule::getType<{{BaseClassTypeName}}>());{{/BaseClassTypeName}}
{{#InterfaceTypes}}
    typeProperty->addInterface(TCHAR("{{InterfaceTypeName}}"), MI_VTABLE_OFFSET({{TypeName}}, {{InterfaceTypeName}}), typeInfoFrom<{{InterfaceTypeName}}>());{{/InterfaceTypes}}
{{^IsAbstract}}{{#Ctors}}
    typeProperty->addCtorPtr()
                ->setFieldAccessor(EPropertyAccessSpecifier::{{AccessSpecifier}}){{#ParamsListContext}}
                ->addFunctionParamProperty(STRID("{{ParamName}}"), TCHAR("{{ParamName}}"), IReflectionRuntimeModule::getType<{{ParamTypeName}}>()){{/ParamsListContext}}
                ->setFunctionReturnProperty(IReflectionRuntimeModule::getType<{{TypeName}}*>())
                ->setPropertyMetaData({ {{CtorMetaData}} }, {{CtorMetaFlags}})
                ->constructFuncPointer<GlobalFunctionWrapperImpl<{{TypeName}} *, void *{{#ParamsList}}, {{ParamsList}}{{/ParamsList}}>>(&ThisType::{{SanitizedName}}_CTor<{{ParamsList}}>);{{!Section ParamList is used to skip `,` in template ParamList}}
{{/Ctors}}{{^Ctors}}{{!If no ctors then just create default ctor}}
    typeProperty->addCtorPtr()
                ->setFieldAccessor(EPropertyAccessSpecifier::Public)
                ->setFunctionReturnProperty(IReflectionRuntimeModule::getType<{{TypeName}}*>())
                ->constructFuncPointer<GlobalFunctionWrapperImpl<{{TypeName}} *, void *>>(&ThisType::{{SanitizedName}}_CTor<>);
{{/Ctors}}
    typeProperty->setDtorPtr(&ThisType::COMBINE(HEADER_FILE_ID, _DTor)<{{TypeName}}>);
    typeProperty->setAllocFuncPtr(&ThisType::COMBINE(HEADER_FILE_ID, _AllocFunc)<{{TypeName}}>);
{{/IsAbstract}}{{#MemberFuncs}}
    typeProperty->addMemberFunc(STRID("{{FunctionName}}"), TCHAR("{{FunctionName}}"))
                ->setFieldAccessor(EPropertyAccessSpecifier::{{AccessSpecifier}}){{#ParamsListContext}}
                ->addFunctionParamProperty(STRID("{{ParamName}}"), TCHAR("{{ParamName}}"), IReflectionRuntimeModule::getType<{{ParamTypeName}}>()){{/ParamsListContext}}
                ->setFunctionReturnProperty(IReflectionRuntimeModule::getType<{{ReturnTypeName}}>())
                ->setPropertyMetaData({ {{FuncMetaData}} }, {{FuncMetaFlags}})
                ->constructFuncPointer<MemberFunctionWrapperImpl<{{#FuncConst}}const {{/FuncConst}}{{TypeName}}, {{ReturnTypeName}}{{#ParamsList}}, {{ParamsList}}{{/ParamsList}}>>(&{{TypeName}}::{{FunctionName}});{{!Section ParamList is used to skip `,` in template ParamList}}
{{/MemberFuncs}}{{#StaticFuncs}}
    typeProperty->addStaticFunc(STRID("{{FunctionName}}"), TCHAR("{{FunctionName}}"))
                ->setFieldAccessor(EPropertyAccessSpecifier::{{AccessSpecifier}}){{#ParamsListContext}}
                ->addFunctionParamProperty(STRID("{{ParamName}}"), TCHAR("{{ParamName}}"), IReflectionRuntimeModule::getType<{{ParamTypeName}}>()){{/ParamsListContext}}
                ->setFunctionReturnProperty(IReflectionRuntimeModule::getType<{{ReturnTypeName}}>())
                ->setPropertyMetaData({ {{FuncMetaData}} }, {{FuncMetaFlags}})
                ->constructFuncPointer<GlobalFunctionWrapperImpl<{{ReturnTypeName}}{{#ParamsList}}, {{ParamsList}}{{/ParamsList}}>>(&{{TypeName}}::{{FunctionName}});{{!Section ParamList is used to skip `,` in template ParamList}}
{{/StaticFuncs}}
{{#MemberFields}}
    typeProperty->addMemberField(STRID("{{FieldName}}"), TCHAR("{{FieldName}}"))
                ->setFieldAccessor(EPropertyAccessSpecifier::{{AccessSpecifier}})
                ->setField(IReflectionRuntimeModule::getType<{{FieldTypeName}}>())
                ->setPropertyMetaData({ {{FieldMetaData}} }, {{FieldMetaFlags}})
                ->constructFieldPtr<MemberFieldWrapperImpl<{{TypeName}}, {{FieldTypeName}}>>(&{{TypeName}}::{{FieldName}});
{{/MemberFields}}{{#StaticFields}}
    typeProperty->addStaticField(STRID("{{FieldName}}"), TCHAR("{{FieldName}}"))
                ->setFieldAccessor(EPropertyAccessSpecifier::{{AccessSpecifier}})
                ->setField(IReflectionRuntimeModule::getType<{{FieldTypeName}}>())
                ->setPropertyMetaData({ {{FieldMetaData}} }, {{FieldMetaFlags}})
                ->constructFieldPtr<GlobalFieldWrapperImpl<{{FieldTypeName}}>>(&{{TypeName}}::{{FieldName}});
{{/StaticFields}}
}
{{/Classes}}